0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.1.14
3 info using node@v0.10.35
4 verbose node symlink /usr/local/bin/node
5 verbose publish [ '.' ]
6 silly cache add args [ '.', null ]
7 verbose cache add spec .
8 silly cache add parsed spec { raw: '.',
8 silly cache add   scope: null,
8 silly cache add   name: null,
8 silly cache add   rawSpec: '.',
8 silly cache add   spec: '/Users/jorgesilvajetter/Sites/2015/rethinkdb-init',
8 silly cache add   type: 'directory' }
9 verbose tar pack [ '/Users/jorgesilvajetter/.npm/rethinkdb-init/0.0.3/package.tgz',
9 verbose tar pack   '/Users/jorgesilvajetter/Sites/2015/rethinkdb-init' ]
10 verbose tarball /Users/jorgesilvajetter/.npm/rethinkdb-init/0.0.3/package.tgz
11 verbose folder /Users/jorgesilvajetter/Sites/2015/rethinkdb-init
12 info prepublish rethinkdb-init@0.0.3
13 verbose addLocalTarball adding from inside cache /Users/jorgesilvajetter/.npm/rethinkdb-init/0.0.3/package.tgz
14 silly cache afterAdd rethinkdb-init@0.0.3
15 verbose afterAdd /Users/jorgesilvajetter/.npm/rethinkdb-init/0.0.3/package/package.json not in flight; writing
16 verbose afterAdd /Users/jorgesilvajetter/.npm/rethinkdb-init/0.0.3/package/package.json written
17 silly publish { name: 'rethinkdb-init',
17 silly publish   version: '0.0.3',
17 silly publish   description: 'Create all RethinkDB databases, tables and indexes automatically through a schema object',
17 silly publish   main: 'index.js',
17 silly publish   scripts: { test: './node_modules/mocha/bin/mocha --bail ./test' },
17 silly publish   keywords: [ 'rethinkdb', 'database', 'bootstrap', 'init' ],
17 silly publish   author: { name: 'thejsj' },
17 silly publish   license: 'MIT',
17 silly publish   dependencies: { lodash: '^3.7.0', q: '^1.2.1' },
17 silly publish   devDependencies:
17 silly publish    { mocha: '^2.2.4',
17 silly publish      protolog: '0.0.3',
17 silly publish      rethinkdb: '^2.0.0',
17 silly publish      should: '^6.0.1' },
17 silly publish   readme: '# RethinkDB Init\n\nCreate all RethinkDB databases, tables and indexes automatically through a schema object.\n\nOften times, application code that uses RethinkDB has a significant portion of code meant for creating the database, tables and indexes [example](https://github.com/thejsj/image-pin/blob/master/server/db/index.js). This module is meant so that you can pass an object with the required initial state of your database and get a promise/callback for when all the necesary componentes have been added to the database. This removes a lot of boilerplate code from your application code and makes it easier to understand what is needed in the database to run the application.\n\n## Examples\n\n### Instantiating database with a table and an index\n\nThe first argument is a connection object with `host`, `port`, and `db`. If the `db` doesn’t exist, it will be created automatically.\n\nThe second argument is an array of tables. Each table can either be a string or an object. If the entry is an object, it must have a `name` property.\n\n```javascript\nvar r = require(‘rethinkdb’);\nrequire(‘rethinkdb-init’)(r);\n\nr.init({\n    host: ‘localhost’,\n    port: 28015,\n    db: ‘superDatabase’\n  }, [\n    {\n      name: ‘person’,\n      indexes: [‘firstName’, ‘lastName’]\n    },\n    ‘address’\n  ]\n})\n.then(function (conn) {\n  // All tables and indexes have been created\n});\n```\n\n### Instantiating a database with 4 tables with no indexes\n\nWhen the array contains a string, a table will be added with that name.\n\n```javascript\nvar r = require(‘rethinkdb’);\nrequire(‘rethinkdb-init’)(r);\n\nr.init({\n    host: ‘localhost’,\n    port: 28015,\n    db: ‘helloDatabase’\n  },\n  [\n    ‘hello_table’,\n    ‘another_table’,\n    ‘yet_another_table’,\n    ‘one_last_table’,\n  ]\n})\n.then(function (conn) {\n  // All tables and indexes have been created\n});\n```\n\n### Instantiating a database with 2 tables and 2 indexes on one of the tables\n\nTable objects can contain indexes (which can also be strings or objects).\n\n```javascript\nvar r = require(‘rethinkdb’);\nrequire(‘rethinkdb-init’)(r);\n\nr.init({\n    host: ‘localhost’,\n    port: 28015,\n    db: ‘helloDatabase’\n  },\n  [\n    {\n      name: ‘helloTable’,\n      indexes: [‘superIndex’, ‘superDuperIndex’]\n    },\n    ‘anotherTable’\n  ]\n})\n.then(function (conn) {\n  // All tables and indexes have been created\n});\n```\n\n### Instantiating a database with 1 tables and 1 geo index\n\nYou can add a `geo` or `multi` attribute along with an index and it will be passed along to the [`indexCreate`](http://rethinkdb.com/api/javascript/index_create/) function.\n\n```javascript\nvar r = require(‘rethinkdb’);\nrequire(‘rethinkdb-init’)(r);\n\nr.init({\n    host: ‘localhost’,\n    port: 28015,\n    db: ‘helloDatabase’\n  },\n  [\n    {\n      name: ‘helloTable’,\n      indexes: [{\n        name: ‘location’,\n        geo: true,\n      }]\n    },\n  ]\n})\n.then(function (conn) {\n  // All tables and indexes have been created\n});\n```\n\n### Instantiating a database with 1 tables and 1 multi+geo index\n\n```javascript\nvar r = require(‘rethinkdb’);\nrequire(‘rethinkdb-init’)(r);\n\nr.init({\n    host: ‘localhost’,\n    port: 28015,\n    db: ‘helloDatabase’\n  },\n  [\n    {\n      name: ‘helloTable’,\n      indexes: [{\n        name: ‘location’,\n        geo: true,\n        multi: true,\n      }]\n    },\n  ]\n})\n.then(function (conn) {\n  // All tables and indexes have been created\n});\n```\n\n### Instantiating a database with 1 table and 1 index with an indexFunction\n\nYou can add a `indexFunction` attribute along with an index and it will be passed along to the [`indexCreate`](http://rethinkdb.com/api/javascript/index_create/) function.\n\n```javascript\nvar r = require(‘rethinkdb’);\nrequire(‘rethinkdb-init’)(r);\n\nr.init({\n    host: ‘localhost’,\n    port: 28015,\n    db: ‘helloDatabase’\n  },\n  [\n    {\n      name: ‘helloTable’,\n      indexes: [{\n        name: ‘has_location’,\n        indexFunction: function (row) {\n          return row.hasFields(‘location’);\n        },\n      }]\n    },\n  ]\n})\n.then(function (conn) {\n  // All tables and indexes have been created\n});\n```\n### Instantiating  a database with 1 table with a different primaryKey, soft durability, 2 replicas, and 2 shards\n\nYou can pass a `primaryKey`, `durability`, `replicas`, or `shards` attribute to a table and it will be passed along to the [`tableCreate`](http://rethinkdb.com/api/javascript/table_create/) function.\n\n\n```javascript\nvar r = require(‘rethinkdb’);\nrequire(‘rethinkdb-init’)(r);\n\nr.init({\n    host: ‘localhost’,\n    port: 28015,\n    db: ‘helloDatabase’\n  },\n  [\n    {\n      name: ‘helloTable’,\n      primaryKey: ‘location’,\n      durability: ‘soft’\n      replicas: 2,\n      shards: 2\n    },\n  ]\n})\n.then(function (conn) {\n  // All tables and indexes have been created\n});\n```\n\n',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: '149100038c4ec822aff1c5fc4d183c0c837f8c22',
17 silly publish   _id: 'rethinkdb-init@0.0.3',
17 silly publish   _shasum: 'b3d124c38d922020d2e3d217c317a1a117d60f8a',
17 silly publish   _from: '.' }
18 silly mapToRegistry name rethinkdb-init
19 silly mapToRegistry using default registry
20 silly mapToRegistry registry https://registry.npmjs.org/
21 silly mapToRegistry uri https://registry.npmjs.org/rethinkdb-init
22 verbose publish registryBase https://registry.npmjs.org/
23 silly publish uploading /Users/jorgesilvajetter/.npm/rethinkdb-init/0.0.3/package.tgz
24 verbose request uri https://registry.npmjs.org/rethinkdb-init
25 verbose request sending authorization for write operation
26 info attempt registry request try #1 at 09:13:12
27 verbose request id f8a9b048e29c3ed7
28 http request PUT https://registry.npmjs.org/rethinkdb-init
29 http 403 https://registry.npmjs.org/rethinkdb-init
30 verbose headers { 'content-type': 'application/json',
30 verbose headers   'cache-control': 'max-age=60',
30 verbose headers   'content-length': '95',
30 verbose headers   'accept-ranges': 'bytes',
30 verbose headers   date: 'Thu, 28 May 2015 16:13:38 GMT',
30 verbose headers   via: '1.1 varnish',
30 verbose headers   connection: 'keep-alive',
30 verbose headers   'x-served-by': 'cache-lax1425-LAX',
30 verbose headers   'x-cache': 'MISS',
30 verbose headers   'x-cache-hits': '0',
30 verbose headers   'x-timer': 'S1432829615.847814,VS0,VE2504' }
31 verbose request invalidating /Users/jorgesilvajetter/.npm/registry.npmjs.org/rethinkdb-init on PUT
32 error publish Failed PUT 403
33 verbose stack Error: "You cannot publish over the previously published version 0.0.3." : rethinkdb-init
33 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:244:14)
33 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
33 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:373:22)
33 verbose stack     at Request.emit (events.js:98:17)
33 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1318:14)
33 verbose stack     at Request.emit (events.js:117:20)
33 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1266:12)
33 verbose stack     at IncomingMessage.emit (events.js:117:20)
33 verbose stack     at _stream_readable.js:944:16
33 verbose stack     at process._tickCallback (node.js:442:13)
34 verbose statusCode 403
35 verbose pkgid rethinkdb-init
36 verbose cwd /Users/jorgesilvajetter/Sites/2015/rethinkdb-init
37 error Darwin 14.1.0
38 error argv "node" "/usr/local/bin/npm" "publish"
39 error node v0.10.35
40 error npm  v2.1.14
41 error code E403
42 error "You cannot publish over the previously published version 0.0.3." : rethinkdb-init
43 error If you need help, you may report this error at:
43 error     <http://github.com/npm/npm/issues>
44 verbose exit [ 1, true ]
